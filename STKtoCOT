import pytak
import csv
import numpy as np
import asyncio

def skew_Zoldos(q_v):
    return np.array([[0, -q_v[2], q_v[1]],[q_v[2], 0, -q_v[0]],[-q_v[1], q_v[0], 0]])

def q_to_Euler_Zoldos(q):
    print(q)
    I = np.eye(3)
    q_v = np.array([q[1], q[2], q[3]])
    q_s = q[0]
    R = (((q_s**2) - (q_v.T @ q_v)) * I) - (2 * q_s * skew_Zoldos(q_v)) + (2 * q_v @ q_v.T)

    theta = np.array([0, 0, 0])
    # Sequence == 321
    theta[1] = np.arcsin(-R[0, 2])
    theta[0] = np.arcsin(R[0, 1] / np.cos(theta[1]))
    theta[2] = np.arcsin(R[1, 2] / np.cos(theta[1]))
    theta = np.rad2deg(theta)
    return theta

async def generate_cot_pli_files(gps_file, imu_file, output_directory):
    with open(gps_file, 'r') as gps_csv, open(imu_file, 'r') as imu_csv:
        gps_reader = csv.DictReader(gps_csv)
        imu_reader = csv.DictReader(imu_csv)

        for gps_row, imu_row in zip(gps_reader, imu_reader):
            theta_row = q_to_Euler_Zoldos(imu_row)
            #theta_row = np.transpose(theta_row)
            target_name = ['Ground Vehicle']
            time = gps_row["Time (EpSec)"]
            latitude = float(gps_row["Lat (deg)"])
            longitude = float(gps_row["Lon (deg)"])
            altitude = float(gps_row["Alt (m)"])
            heading = float(theta_row[0])
            pitch = float(theta_row[1])
            roll = float(theta_row[2])

            #Create COT PLI event
            cot_event = pytak.CotEvent()
            cot_event.uid = f"{target_name}_{time}"
            cot_event.type = 'a-f-G-U-C'
            cot_event.how = {'a': heading, 'c': 'u'}
            cot_event.point = (longitude, latitude, altitude)
            cot_event.stale = 60  # Stale time in seconds (1 minute)

            # COT to file
            output_file = f"{output_directory}/{target_name}_{time}.cot"
            with open(output_file, 'w') as outfile:
                outfile.write(cot_event.to_xml())

async def main():
    gps_file = 'GPS.csv'
    imu_file = 'IMU.csv'
    output_directory = 'cot_pli_files'

    await generate_cot_pli_files(gps_file, imu_file, output_directory)
    

if __name__ == "__main__":
    asyncio.run(main())

